import React, { useState, useEffect } from 'react';
import { Bot, Key, Settings, Check, AlertCircle, Save, Zap, Globe } from 'lucide-react';

interface APIKeys {
  openai: string;
  claude: string;
  google: string;
  yandex: string;
  yandexFolder: string;
}

export default function AIAssistantSetup() {
  const [keys, setKeys] = useState<APIKeys>({
    openai: '',
    claude: '',
    google: '',
    yandex: '',
    yandexFolder: ''
  });

  const [testResults, setTestResults] = useState<Record<string, boolean>>({});
  const [testing, setTesting] = useState<Record<string, boolean>>({});
  const [saved, setSaved] = useState(false);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∫–ª—é—á–∏ –∏–∑ localStorage
  useEffect(() => {
    const savedKeys = localStorage.getItem('ai-api-keys');
    if (savedKeys) {
      setKeys(JSON.parse(savedKeys));
    }
  }, []);

  const handleKeyChange = (provider: keyof APIKeys, value: string) => {
    setKeys(prev => ({ ...prev, [provider]: value }));
  };

  const saveKeys = () => {
    localStorage.setItem('ai-api-keys', JSON.stringify(keys));
    setSaved(true);
    setTimeout(() => setSaved(false), 2000);
  };

  const testAPI = async (provider: keyof APIKeys) => {
    if (!keys[provider]) return;
    
    setTesting(prev => ({ ...prev, [provider]: true }));
    
    try {
      // –°–∏–º—É–ª—è—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API
      await new Promise(resolve => setTimeout(resolve, 1500));
      
      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Ç–µ—Å—Ç API
      const success = keys[provider].length > 10; // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
      
      setTestResults(prev => ({ ...prev, [provider]: success }));
    } catch (error) {
      setTestResults(prev => ({ ...prev, [provider]: false }));
    } finally {
      setTesting(prev => ({ ...prev, [provider]: false }));
    }
  };

  const providers = [
    {
      key: 'openai' as keyof APIKeys,
      name: 'OpenAI (ChatGPT)',
      placeholder: 'sk-...',
      description: '–ü–æ–ª—É—á–∏—Ç–µ –∫–ª—é—á –Ω–∞ platform.openai.com',
      paid: true
    },
    {
      key: 'claude' as keyof APIKeys,
      name: 'Claude (Anthropic)',
      placeholder: 'sk-ant-...',
      description: '–ü–æ–ª—É—á–∏—Ç–µ –∫–ª—é—á –Ω–∞ console.anthropic.com',
      paid: true
    },
    {
      key: 'google' as keyof APIKeys,
      name: 'Google AI (Gemini)',
      placeholder: 'AIza...',
      description: '–ü–æ–ª—É—á–∏—Ç–µ –∫–ª—é—á –≤ Google AI Studio',
      paid: true
    },
    {
      key: 'yandex' as keyof APIKeys,
      name: 'Yandex GPT',
      placeholder: 'AQVN...',
      description: '–ü–æ–ª—É—á–∏—Ç–µ –∫–ª—é—á –≤ Yandex Cloud',
      paid: true
    }
  ];

  return (
    <div className="max-w-4xl mx-auto p-6">
      <div className="bg-white rounded-lg shadow-lg p-8">
        <div className="flex items-center gap-3 mb-8">
          <Bot className="w-8 h-8 text-blue-600" />
          <h1 className="text-3xl font-bold text-gray-800">–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ò–ò –ü–æ–º–æ—â–Ω–∏–∫–∞</h1>
        </div>

        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–∞—Ö */}
        <div className="mb-8 p-6 bg-gradient-to-r from-green-50 to-blue-50 border border-green-200 rounded-lg">
          <div className="flex items-center gap-3 mb-4">
            <Zap className="w-6 h-6 text-green-600" />
            <h2 className="text-xl font-bold text-green-800">üéâ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ò–ò –ø–æ–º–æ—â–Ω–∏–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã!</h2>
          </div>
          <div className="grid md:grid-cols-2 gap-4">
            <div className="bg-white p-4 rounded-lg border border-green-200">
              <h3 className="font-semibold text-green-700 mb-2">üß† –£–º–Ω—ã–π –ò–ò (–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)</h3>
              <p className="text-sm text-gray-600">–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ—Ç –ª—É—á—à–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –ò–ò. –†–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ API –∫–ª—é—á–µ–π!</p>
            </div>
            <div className="bg-white p-4 rounded-lg border border-blue-200">
              <h3 className="font-semibold text-blue-700 mb-2">‚ö° –õ–æ–∫–∞–ª—å–Ω—ã–π –ò–ò</h3>
              <p className="text-sm text-gray-600">–†–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞. –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –±–æ—Ç–∞—Ö.</p>
            </div>
            <div className="bg-white p-4 rounded-lg border border-purple-200">
              <h3 className="font-semibold text-purple-700 mb-2">üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π GPT</h3>
              <p className="text-sm text-gray-600">–ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π ChatGPT —á–µ—Ä–µ–∑ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø—É–±–ª–∏—á–Ω—ã–µ API.</p>
            </div>
            <div className="bg-white p-4 rounded-lg border border-orange-200">
              <h3 className="font-semibold text-orange-700 mb-2">ü§ó Hugging Face</h3>
              <p className="text-sm text-gray-600">–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –º–æ–¥–µ–ª–∏ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ.</p>
            </div>
          </div>
          <div className="mt-4 p-3 bg-green-100 rounded-lg">
            <p className="text-green-800 font-medium">
              üí° –°–æ–≤–µ—Ç: –ù–∞—á–Ω–∏—Ç–µ —Å –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤! –û–Ω–∏ –æ—Ç–ª–∏—á–Ω–æ –ø–æ–¥—Ö–æ–¥—è—Ç –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ –∑–∞–¥–∞—á.
            </p>
          </div>
        </div>

        <div className="mb-8 p-4 bg-blue-50 border border-blue-200 rounded-lg">
          <h2 className="font-semibold text-blue-800 mb-2">üìù –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</h2>
          <ol className="text-blue-700 text-sm space-y-1">
            <li>1. <strong>–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:</strong> –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª "–ò–ò –ü–æ–º–æ—â–Ω–∏–∫" - –æ–Ω–∏ —É–∂–µ —Ä–∞–±–æ—Ç–∞—é—Ç!</li>
            <li>2. <strong>–ü–ª–∞—Ç–Ω—ã–µ API:</strong> –ü–æ–ª—É—á–∏—Ç–µ API –∫–ª—é—á–∏ –æ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –ò–ò (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)</li>
            <li>3. –í—Å—Ç–∞–≤—å—Ç–µ –∫–ª—é—á–∏ –≤ –ø–æ–ª—è –Ω–∏–∂–µ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω—É–∂–Ω—ã –ø–ª–∞—Ç–Ω—ã–µ –º–æ–¥–µ–ª–∏)</li>
            <li>4. –ù–∞–∂–º–∏—Ç–µ "–¢–µ—Å—Ç" –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏</li>
            <li>5. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</li>
          </ol>
        </div>

        <div className="mb-6">
          <h3 className="text-lg font-semibold text-gray-800 mb-4">üí∞ –ü–ª–∞—Ç–Ω—ã–µ API (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)</h3>
          <p className="text-sm text-gray-600 mb-4">
            –≠—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω—É–∂–Ω—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–ª–∞—Ç–Ω—ã–µ API. 
            –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —É–∂–µ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ —Ä–∞–∑–¥–µ–ª–µ "–ò–ò –ü–æ–º–æ—â–Ω–∏–∫"!
          </p>
        </div>

        <div className="space-y-6">
          {providers.map((provider) => (
            <div key={provider.key} className="border border-gray-200 rounded-lg p-6 opacity-75">
              <div className="flex items-center justify-between mb-4">
                <div>
                  <div className="flex items-center gap-2">
                    <h3 className="text-lg font-semibold text-gray-800">{provider.name}</h3>
                    <span className="px-2 py-1 bg-yellow-100 text-yellow-800 rounded text-xs font-medium">
                      –ü–õ–ê–¢–ù–´–ô
                    </span>
                  </div>
                  <p className="text-sm text-gray-600">{provider.description}</p>
                </div>
                <div className="flex items-center gap-2">
                  {testResults[provider.key] === true && (
                    <div className="flex items-center gap-1 text-green-600">
                      <Check className="w-4 h-4" />
                      <span className="text-sm">–†–∞–±–æ—Ç–∞–µ—Ç</span>
                    </div>
                  )}
                  {testResults[provider.key] === false && (
                    <div className="flex items-center gap-1 text-red-600">
                      <AlertCircle className="w-4 h-4" />
                      <span className="text-sm">–û—à–∏–±–∫–∞</span>
                    </div>
                  )}
                </div>
              </div>

              <div className="flex gap-3">
                <div className="flex-1">
                  <div className="relative">
                    <Key className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400" />
                    <input
                      type="password"
                      placeholder={provider.placeholder}
                      value={keys[provider.key]}
                      onChange={(e) => handleKeyChange(provider.key, e.target.value)}
                      className="w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    />
                  </div>
                </div>
                <button
                  onClick={() => testAPI(provider.key)}
                  disabled={!keys[provider.key] || testing[provider.key]}
                  className="px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:bg-gray-300 disabled:cursor-not-allowed flex items-center gap-2"
                >
                  {testing[provider.key] ? (
                    <>
                      <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                      –¢–µ—Å—Ç...
                    </>
                  ) : (
                    <>
                      <Settings className="w-4 h-4" />
                      –¢–µ—Å—Ç
                    </>
                  )}
                </button>
              </div>
            </div>
          ))}

          {/* Yandex Folder ID */}
          <div className="border border-gray-200 rounded-lg p-6 opacity-75">
            <h3 className="text-lg font-semibold text-gray-800 mb-2">Yandex Folder ID</h3>
            <p className="text-sm text-gray-600 mb-4">–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è Yandex GPT API (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø–ª–∞—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏)</p>
            <input
              type="text"
              placeholder="b1g..."
              value={keys.yandexFolder}
              onChange={(e) => handleKeyChange('yandexFolder', e.target.value)}
              className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            />
          </div>
        </div>

        {/* –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è */}
        <div className="mt-8 pt-6 border-t border-gray-200">
          <button
            onClick={saveKeys}
            className={`px-8 py-3 rounded-lg font-semibold flex items-center gap-2 transition-colors ${
              saved 
                ? 'bg-green-600 text-white' 
                : 'bg-blue-600 text-white hover:bg-blue-700'
            }`}
          >
            {saved ? (
              <>
                <Check className="w-5 h-5" />
                –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ!
              </>
            ) : (
              <>
                <Save className="w-5 h-5" />
                –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
              </>
            )}
          </button>
        </div>

        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ */}
        <div className="mt-6 p-4 bg-yellow-50 border border-yellow-200 rounded-lg">
          <h4 className="font-semibold text-yellow-800 mb-2">üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:</h4>
          <ul className="text-yellow-700 text-sm space-y-1">
            <li>‚Ä¢ –ö–ª—é—á–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ –≤–∞—à–µ–º –±—Ä–∞—É–∑–µ—Ä–µ</li>
            <li>‚Ä¢ –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –¥–µ–ª–∏—Ç–µ—Å—å API –∫–ª—é—á–∞–º–∏</li>
            <li>‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ –æ–±–Ω–æ–≤–ª—è–π—Ç–µ –∫–ª—é—á–∏</li>
            <li>‚Ä¢ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–µ —Ç—Ä–µ–±—É—é—Ç –∫–ª—é—á–µ–π!</li>
          </ul>
        </div>
      </div>
    </div>
  );
}